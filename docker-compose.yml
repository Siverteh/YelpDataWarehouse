version: '3.8'

services:
  # MySQL for relational data warehouse
  mysql:
    image: mysql:8.0
    container_name: yelp-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_HOST: "%"  # Allow connections from any host
    ports:
      - "3306:3306"
    volumes:
      - ./sql/schema:/docker-entrypoint-initdb.d
      - mysql-data:/var/lib/mysql
    networks:
      - yelp-network

  # MongoDB for document-based NoSQL implementation
  mongodb:
    image: mongo:4.4  # Using a specific version to avoid issues
    container_name: yelp-mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: yelp_db
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    command: --wiredTigerCacheSizeGB 0.5  # Reduce memory usage
    networks:
      - yelp-network

  # Neo4j for graph-based NoSQL implementation
  neo4j:
    image: neo4j:4.4  # Using a specific version to avoid issues
    container_name: yelp-neo4j
    restart: always
    environment:
      NEO4J_AUTH: ${NEO4J_AUTH}
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 1G
      NEO4J_dbms_memory_pagecache_size: 512m
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j-data:/data
    networks:
      - yelp-network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: yelp-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    networks:
      - yelp-network

  # Kafka for data streaming
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: yelp-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_INTER_BROKER_LISTENER_NAME}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
    networks:
      - yelp-network

  # Web application with built-in initialization
  webapp:
    build:
      context: ./webapp
    container_name: yelp-webapp
    restart: always
    depends_on:
      - mysql
      - mongodb
      - neo4j
      - kafka
    ports:
      - "${WEBAPP_PORT}:8080"
    environment:
      - FLASK_APP=${FLASK_APP}
      - FLASK_ENV=${FLASK_ENV}
      - FLASK_DEBUG=${FLASK_DEBUG}
      - MYSQL_HOST=${MYSQL_HOST}
      - MYSQL_PORT=${MYSQL_PORT}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MONGO_USER=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_HOST=${MONGO_HOST}
      - MONGO_PORT=${MONGO_PORT}
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - NEO4J_HOST=${NEO4J_HOST}
      - NEO4J_PORT=${NEO4J_PORT}
      - INITIALIZE_DB=true  # Flag to initialize databases
    networks:
      - yelp-network

networks:
  yelp-network:
    driver: bridge

volumes:
  mysql-data:
  mongodb-data:
  neo4j-data: